/*
 * generated by Xtext 2.24.0
 */
package naomod.family.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FamilyGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FamilyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "naomod.family.Family.Family");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMembersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMembersPersonParserRuleCall_0_0 = (RuleCall)cMembersAssignment_0.eContents().get(0);
		private final Assignment cRelationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationsRelationParserRuleCall_1_0 = (RuleCall)cRelationsAssignment_1.eContents().get(0);
		
		//Family:
		//	members+=Person*
		//	relations+=Relation*;
		@Override public ParserRule getRule() { return rule; }
		
		//members+=Person*
		//relations+=Relation*
		public Group getGroup() { return cGroup; }
		
		//members+=Person*
		public Assignment getMembersAssignment_0() { return cMembersAssignment_0; }
		
		//Person
		public RuleCall getMembersPersonParserRuleCall_0_0() { return cMembersPersonParserRuleCall_0_0; }
		
		//relations+=Relation*
		public Assignment getRelationsAssignment_1() { return cRelationsAssignment_1; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_1_0() { return cRelationsRelationParserRuleCall_1_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "naomod.family.Family.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstNameNAMETerminalRuleCall_1_0 = (RuleCall)cFirstNameAssignment_1.eContents().get(0);
		private final Assignment cLastNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLastNameNAMETerminalRuleCall_2_0 = (RuleCall)cLastNameAssignment_2.eContents().get(0);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Person:
		//	'Person' firstName=NAME lastName=NAME 'id=' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Person' firstName=NAME lastName=NAME 'id=' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'Person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//firstName=NAME
		public Assignment getFirstNameAssignment_1() { return cFirstNameAssignment_1; }
		
		//NAME
		public RuleCall getFirstNameNAMETerminalRuleCall_1_0() { return cFirstNameNAMETerminalRuleCall_1_0; }
		
		//lastName=NAME
		public Assignment getLastNameAssignment_2() { return cLastNameAssignment_2; }
		
		//NAME
		public RuleCall getLastNameNAMETerminalRuleCall_2_0() { return cLastNameNAMETerminalRuleCall_2_0; }
		
		//'id='
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "naomod.family.Family.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPersonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPersonPersonCrossReference_0_0 = (CrossReference)cPersonAssignment_0.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_0_0_1 = (RuleCall)cPersonPersonCrossReference_0_0.eContents().get(1);
		private final Keyword cIsChildOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParentOneAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParentOnePersonCrossReference_2_0 = (CrossReference)cParentOneAssignment_2.eContents().get(0);
		private final RuleCall cParentOnePersonIDTerminalRuleCall_2_0_1 = (RuleCall)cParentOnePersonCrossReference_2_0.eContents().get(1);
		private final Keyword cAndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParentTwoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParentTwoPersonCrossReference_4_0 = (CrossReference)cParentTwoAssignment_4.eContents().get(0);
		private final RuleCall cParentTwoPersonIDTerminalRuleCall_4_0_1 = (RuleCall)cParentTwoPersonCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Relation:
		//	person=[Person] 'isChildOf' parentOne=[Person] 'and' parentTwo=[Person] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//person=[Person] 'isChildOf' parentOne=[Person] 'and' parentTwo=[Person] ';'
		public Group getGroup() { return cGroup; }
		
		//person=[Person]
		public Assignment getPersonAssignment_0() { return cPersonAssignment_0; }
		
		//[Person]
		public CrossReference getPersonPersonCrossReference_0_0() { return cPersonPersonCrossReference_0_0; }
		
		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_0_0_1() { return cPersonPersonIDTerminalRuleCall_0_0_1; }
		
		//'isChildOf'
		public Keyword getIsChildOfKeyword_1() { return cIsChildOfKeyword_1; }
		
		//parentOne=[Person]
		public Assignment getParentOneAssignment_2() { return cParentOneAssignment_2; }
		
		//[Person]
		public CrossReference getParentOnePersonCrossReference_2_0() { return cParentOnePersonCrossReference_2_0; }
		
		//ID
		public RuleCall getParentOnePersonIDTerminalRuleCall_2_0_1() { return cParentOnePersonIDTerminalRuleCall_2_0_1; }
		
		//'and'
		public Keyword getAndKeyword_3() { return cAndKeyword_3; }
		
		//parentTwo=[Person]
		public Assignment getParentTwoAssignment_4() { return cParentTwoAssignment_4; }
		
		//[Person]
		public CrossReference getParentTwoPersonCrossReference_4_0() { return cParentTwoPersonCrossReference_4_0; }
		
		//ID
		public RuleCall getParentTwoPersonIDTerminalRuleCall_4_0_1() { return cParentTwoPersonIDTerminalRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	
	
	private final FamilyElements pFamily;
	private final PersonElements pPerson;
	private final RelationElements pRelation;
	private final TerminalRule tNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FamilyGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFamily = new FamilyElements();
		this.pPerson = new PersonElements();
		this.pRelation = new RelationElements();
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "naomod.family.Family.NAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("naomod.family.Family".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Family:
	//	members+=Person*
	//	relations+=Relation*;
	public FamilyElements getFamilyAccess() {
		return pFamily;
	}
	
	public ParserRule getFamilyRule() {
		return getFamilyAccess().getRule();
	}
	
	//Person:
	//	'Person' firstName=NAME lastName=NAME 'id=' name=ID ';';
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Relation:
	//	person=[Person] 'isChildOf' parentOne=[Person] 'and' parentTwo=[Person] ';';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//terminal NAME:
	//	'A'..'Z' 'a'..'z'* ('-' 'A'..'Z' 'a'..'z'*)?;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
