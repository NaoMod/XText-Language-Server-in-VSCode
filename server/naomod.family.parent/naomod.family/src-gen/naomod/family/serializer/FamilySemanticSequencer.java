/*
 * generated by Xtext 2.24.0
 */
package naomod.family.serializer;

import com.google.inject.Inject;
import java.util.Set;
import naomod.family.family.Family;
import naomod.family.family.FamilyPackage;
import naomod.family.family.Person;
import naomod.family.family.Relation;
import naomod.family.services.FamilyGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FamilySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FamilyGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FamilyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FamilyPackage.FAMILY:
				sequence_Family(context, (Family) semanticObject); 
				return; 
			case FamilyPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case FamilyPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Family returns Family
	 *
	 * Constraint:
	 *     ((members+=Person+ relations+=Relation+) | relations+=Relation+)?
	 */
	protected void sequence_Family(ISerializationContext context, Family semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (firstName=NAME lastName=NAME name=ID)
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FamilyPackage.Literals.PERSON__FIRST_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FamilyPackage.Literals.PERSON__FIRST_NAME));
			if (transientValues.isValueTransient(semanticObject, FamilyPackage.Literals.PERSON__LAST_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FamilyPackage.Literals.PERSON__LAST_NAME));
			if (transientValues.isValueTransient(semanticObject, FamilyPackage.Literals.PERSON__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FamilyPackage.Literals.PERSON__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersonAccess().getFirstNameNAMETerminalRuleCall_1_0(), semanticObject.getFirstName());
		feeder.accept(grammarAccess.getPersonAccess().getLastNameNAMETerminalRuleCall_2_0(), semanticObject.getLastName());
		feeder.accept(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (person=[Person|ID] parentOne=[Person|ID] parentTwo=[Person|ID])
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FamilyPackage.Literals.RELATION__PERSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FamilyPackage.Literals.RELATION__PERSON));
			if (transientValues.isValueTransient(semanticObject, FamilyPackage.Literals.RELATION__PARENT_ONE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FamilyPackage.Literals.RELATION__PARENT_ONE));
			if (transientValues.isValueTransient(semanticObject, FamilyPackage.Literals.RELATION__PARENT_TWO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FamilyPackage.Literals.RELATION__PARENT_TWO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getPersonPersonIDTerminalRuleCall_0_0_1(), semanticObject.eGet(FamilyPackage.Literals.RELATION__PERSON, false));
		feeder.accept(grammarAccess.getRelationAccess().getParentOnePersonIDTerminalRuleCall_2_0_1(), semanticObject.eGet(FamilyPackage.Literals.RELATION__PARENT_ONE, false));
		feeder.accept(grammarAccess.getRelationAccess().getParentTwoPersonIDTerminalRuleCall_4_0_1(), semanticObject.eGet(FamilyPackage.Literals.RELATION__PARENT_TWO, false));
		feeder.finish();
	}
	
	
}
